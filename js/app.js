// Generated by CoffeeScript 1.6.3
(function() {
  var GameApp;

  GameApp = (function() {
    GameApp.prototype.CELL_SIDE = 30;

    GameApp.prototype.CELL_OFFSET = 2;

    GameApp.prototype.map = void 0;

    GameApp.prototype.c = void 0;

    GameApp.prototype.g = void 0;

    GameApp.prototype.hover_cell = void 0;

    GameApp.prototype.active_cell = void 0;

    function GameApp(element) {
      var _this;
      this._ = GameApp;
      this.c = element;
      this.g = this.c.getContext("2d");
      this.map = new HexaMap(this);
      if (this.c) {
        _this = this;
        $(this.c).on("click", function(e) {
          var cell, ix, iy, new_cell, row, waves, _i, _j, _len, _len1, _ref, _ref1, _ref2;
          new_cell = HexaCell.getCellAt(_this, e.offsetX, e.offsetY);
          if (new_cell !== this.active_cell) {
            if ((_ref = this.active_cell) != null) {
              _ref.offActive();
            }
            if (new_cell != null) {
              new_cell.onActive();
            }
            this.active_cell = new_cell;
            waves = HexaMap.waves(_this.map.map, this.active_cell.x, this.active_cell.y);
            _ref1 = _this.map.map;
            for (iy = _i = 0, _len = _ref1.length; _i < _len; iy = ++_i) {
              row = _ref1[iy];
              for (ix = _j = 0, _len1 = row.length; _j < _len1; ix = ++_j) {
                cell = row[ix];
                if (cell !== void 0) {
                  cell.data = waves != null ? (_ref2 = waves[iy]) != null ? _ref2[ix] : void 0 : void 0;
                }
              }
            }
            return _this.render();
          }
        });
        $(this.c).on("mousedown touchstart", function(e) {
          return true;
        });
        $(this.c).on("mousemove touchstart", function(e) {
          var new_cell, _ref;
          new_cell = HexaCell.getCellAt(_this, e.offsetX, e.offsetY);
          if (new_cell !== this.hover_cell) {
            if ((_ref = this.hover_cell) != null) {
              _ref.offHover();
            }
            if (new_cell != null) {
              new_cell.onHover();
            }
            this.hover_cell = new_cell;
            return _this.render();
          }
        });
      }
      this.render();
      return;
    }

    GameApp.prototype.render = function() {
      this.g.fillStyle = "#eee";
      this.g.fillRect(0, 0, this.c.width, this.c.height);
      return this.map.render();
    };

    return GameApp;

  })();

  $(function() {
    var game;
    return game = new GameApp($(".content .canvas")[0]);
  });

  window.GameApp = GameApp;

}).call(this);
