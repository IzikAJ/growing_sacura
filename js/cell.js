// Generated by CoffeeScript 1.6.3
(function() {
  var HexaCell;

  HexaCell = (function() {
    HexaCell.prototype.CELL_SIDE = void 0;

    HexaCell.prototype.CELL_OFFSET = void 0;

    HexaCell.prototype.color = "#000";

    HexaCell.prototype.state = 0;

    HexaCell.prototype.data = void 0;

    HexaCell.HOVER = 1;

    HexaCell.ACTIVE = 2;

    function HexaCell(app, x, y) {
      this.app = app;
      this.x = x;
      this.y = y;
      this._ = HexaCell;
      this.CELL_SIDE = this.app.CELL_SIDE;
      this.CELL_OFFSET = this.app.CELL_OFFSET;
    }

    HexaCell.prototype.render = function(offset) {
      var a, c, g, pos, xx, yy;
      if (offset == null) {
        offset = [0, 0];
      }
      a = this.CELL_SIDE;
      c = this.CELL_SIDE * Math.sin(Math.PI / 3);
      g = this.app.g;
      offset = this.app.map.offset;
      pos = this.cellPosition();
      xx = pos.x + offset.x || 0;
      yy = pos.y + offset.y || 0;
      if (this.state & HexaCell.ACTIVE) {
        g.strokeStyle = "#0F0";
      } else if (this.state & HexaCell.HOVER) {
        g.strokeStyle = "#F00";
      } else {
        g.strokeStyle = "#000";
      }
      g.lineWidth = 2;
      g.beginPath();
      g.moveTo(xx - a, yy);
      g.lineTo(xx - a * 0.5, yy - c);
      g.lineTo(xx + a * 0.5, yy - c);
      g.lineTo(xx + a, yy);
      g.lineTo(xx + a * 0.5, yy + c);
      g.lineTo(xx - a * 0.5, yy + c);
      g.closePath();
      g.stroke();
      g.lineWidth = 1;
      g.strokeStyle = "#000";
      g.strokeText("" + this.x + "," + this.y, xx, yy);
      if (this.data != null) {
        return g.strokeText(this.data, xx, yy + 10);
      }
    };

    HexaCell.prototype.position = function(x, y) {
      var a, c, xx, yy;
      a = this.CELL_SIDE;
      c = this.CELL_SIDE * Math.sin(Math.PI / 3);
      xx = 1.5 * (a + this.CELL_OFFSET) * (x + y);
      yy = (c + this.CELL_OFFSET) * (y - x);
      return {
        x: xx,
        y: yy
      };
    };

    HexaCell.prototype.cellPosition = function() {
      var a, c, xx, yy;
      a = this.CELL_SIDE;
      c = this.CELL_SIDE * Math.sin(Math.PI / 3);
      xx = 1.5 * (a + this.CELL_OFFSET) * (this.x + this.y);
      yy = (c + this.CELL_OFFSET) * (this.y - this.x);
      return {
        x: xx,
        y: yy
      };
    };

    HexaCell.getCellAt = function(app, mouse_x, mouse_y) {
      var pos;
      pos = this.getCellPositionAt(app, mouse_x, mouse_y);
      return app.map.getCell(pos.x, pos.y);
    };

    HexaCell.getCellPositionAt = function(app, mouse_x, mouse_y) {
      var a, c, ta, tb, x, xx, y, yy;
      xx = mouse_x - app.map.offset.x;
      yy = mouse_y - app.map.offset.y;
      a = app.CELL_SIDE + app.CELL_OFFSET;
      c = app.CELL_SIDE * Math.sin(Math.PI / 3) + app.CELL_OFFSET;
      ta = xx / (3 * a) + 0.5;
      tb = yy / (2 * c);
      x = ta - tb;
      y = ta + tb;
      if (x < 0) {
        x = -1;
      }
      if (y < 0) {
        y = -1;
      }
      return {
        x: ~~x,
        y: ~~y
      };
    };

    HexaCell.prototype.getCellOn = function(map, event) {
      return this.getCellAt(map, event.offsetX, event.offsetY);
    };

    HexaCell.prototype.onHover = function() {
      return this.state ^= HexaCell.HOVER;
    };

    HexaCell.prototype.offHover = function() {
      return this.state ^= HexaCell.HOVER;
    };

    HexaCell.prototype.onActive = function() {
      return this.state ^= HexaCell.ACTIVE;
    };

    HexaCell.prototype.offActive = function() {
      return this.state ^= HexaCell.ACTIVE;
    };

    return HexaCell;

  })();

  window.HexaCell = HexaCell;

}).call(this);
